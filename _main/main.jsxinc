btnPathsArr = [];//this array is for storing the calculations for the contur of the button//these calcualtions are made only for the first button. This is for the CC versionsfunction logW(ss) {// function to log     if (logOn == true) {        mbLog.open('w');        mbLog.write("\n" + ss);        mbLog.close();    }}// global variables for relative path_gMainESHui = File($.fileName);_gESHFolder = Folder(_gMainESHui.path + "/../");//include some functions#include "extras/BCM_runScript.jsxinc";#include "extras/searchBrushByName.jsxinc";#include "extras/customButton.jsxinc";#include "extras/customButton2.jsxinc";// #include "extras/BCMDoubleStateButton.jsxinc";// $.locale = 'fr_FR';// test the localevar PrepressedKeys = { // if a key is pressed before the finishing of draw    altKey: false,    ctrlKey: false,    shiftKey: false,    keyName: ""};var firstResz = 0; //this will be changed when the frst show of the UI will endvar rde = 0; //this should be the varibale that will be changed whne one key was pressed;So the buttons will not draw anymore.var logOn = false; // create or not a log fileif (logOn == true) {    var mbLog = new File(_gCurrentESHui.path + "/mbLog.txt");    mbLog.open('w');    mbLog.write('');    mbLog.close();}var afterUI = "";// this varible will store the command of the pushed buttonfunction execAfterUI() { // this is because the UI keeps the dialog when the command it's applyed    try{        eval(afterUI);    }catch(err){        alert('Error '+err.number+' at line : '+err.line+'\n'            +'In file: '+err.fileName+ '\n'            +'Description: \n'            +'\t'+err.description);    };}//------evaluate all the files in the languages directory, these are for the localizationvar theLanguagesFolder = new Folder(_gMainESHui.path + "/extras/languages");var allLanguagesFiles = theLanguagesFolder.getFiles();var theEnLanguage = new File(theLanguagesFolder + "/en.jsxinc");$.evalFile(theEnLanguage);for (var lng = 0; lng < allLanguagesFiles.length; lng++) {    if (allLanguagesFiles[lng] != theEnLanguage) {        $.evalFile(allLanguagesFiles[lng]);    }}//-------------------------------function findMyESHuiWindow( text0 ){    var winTRet = null;    // alert(Window.children.length);    for( var i = Window.children.length-1; i>=0; i--){        cW = Window.children[i];        alert(Window.children.length + '[[ ' +i + ' :: ' +cW.visible +  ' :: ' + cW.text);        // if(cW.text == text0){        //     winTRet = cW;        //     break;        // }    }    return winTRet;}var win = ''; //make win global variablevar firstPressStick = parseInt(app.version) > 15?true:false;var firstPressAnyButton = true;var intitWinSize = {w:0, h:0, stick:false};function main() {    // findMyESHuiWindow( 'BCM_ESHui' );    // throw 'ererr'    win = new Window('dialog', _gCurrentESHui.name.substring(0,_gCurrentESHui.name.lastIndexOf('.')).replace(/%20/g, " ") , undefined, {        resizeable: true,        closeButton: true,        borderless: false    });    win.mtext = 'BCM_ESHui';    addEvents();    g = win.graphics;    var myBrush = g.newBrush(g.BrushType.SOLID_COLOR, [0.1, 0.1, 0.1, 1]);    g.backgroundColor = myBrush;    g.disabledBackgroundColor = myBrush;    var myPen = g.newPen(g.PenType.SOLID_COLOR, [0.2, 0.2, 0.2, 1], 20); // this is the font color    var shortcutFont = ScriptUI.newFont("Tahoma", "BOLD", 10);    g.foregroundColor = myPen;    g.disabledForegroundColor = myPen;    g.font = ScriptUI.newFont("Tahoma", "BOLD", 11);    logW("winCreated");    win.opacity = .95;    win.spacing = 0;    win.indent = 0;    win.orientation = 'column';    win.gTop = win.add('group', undefined);    win.gTop.alignment = 'fill';    win.gTop.orientation = 'stack';    win.tempB = win.gTop.add('button', undefined, '');    win.tempB.preferredSize = [1, 1];    // alert(app.version)    if (parseInt(app.version) > 15) {        // 	alert('aa');        win.tempB.visible = true;    } else {        win.tempB.visible = false;    }    // var stckTxt = (winSizeFirst.stick == false)?'persistent : \u25A1':"persistent : \u25A0";    // win.stick = win.gTop.add('statictext', undefined, stckTxt);    // win.stick.preferredSize = [100, 20];    // setTheMonoFont(win.stick);    // var g2 = win.stick.graphics;    // var myPen2 = g2.newPen(g2.PenType.SOLID_COLOR, [.3, .3, .3, 1], 20); // this is the font color    // g2.foregroundColor = myPen2;    // g2.disabledForegroundColor = myPen2;    // win.stick.onClick = function(){    //     toggleStick();    // }    win.sTPar = win.gTop.add('group', undefined);    win.sTPar.alignment = 'right';          win.sTPar.orientation = 'row';                win.stick = _2addMyButton(win.sTPar, [60, 20] );        // win.stick = new BCMDoubleStateButton();        // win.stick.create(win.sTPar, [60, 20] );        win.stick.alignment = 'right';        win.stick.label = 'persist';        win.stick.clicked = winSizeFirst.stick==true?1:0;        win.stick.onClick = function(){            toggleStick();        }        win.spaceLef = win.sTPar.add('group', undefined);        win.spaceLef.preferredSize = [0,20];    win.ee = win.add('statictext', undefined, "             ");    var pnlBounds = {        width: winSizeFirst.w - 30,        height: winSizeFirst.h - 60,        x: 0,        y: 0    };    intitWinSize = {w:winSizeFirst.w, h:winSizeFirst.h, stick:winSizeFirst.stick};    // win.pnl0 = win.add('panel', pnlBounds, '', {borderStyle:'none'});    win.pnl0 = win.add('group', pnlBounds);    win.gText = win.add('group', undefined);    win.gText.alignment = 'fill';    win.gText.orientation = 'row';    win.aboutTxt = win.gText.add('statictext', undefined, localize(createdByLCZ));    win.aboutTxt.alignChildren = 'right';    win.aboutTxt.enabled = false;    // the blog..................text with a colord button because in cs4 the onclick for text doesn't work    win.gText.blogTxt = win.gText.add('group');    win.gText.blogTxt.orientation = 'stack';    win.gText.blogTxt.mailTxt = win.gText.blogTxt.add('statictext', undefined, 'http://buliarcatools.blog.fc2.com/');    win.gText.blogTxt.mailTxt.enabled = false;    win.gText.blogTxt.bt1 = win.gText.blogTxt.add('button', undefined, '');    win.gText.blogTxt.bt1.preferredSize = [180, 12];    theColor = new Array(0.1, 0.1, 0.1);    var kSwatchBorderWidth = 0;    var swatchGfx = win.gText.blogTxt.graphics;    swatchGfx.backgroundColor = swatchGfx.newBrush(swatchGfx.BrushType.SOLID_COLOR, theColor);    swatchGfx.disabledBackgroundColor = swatchGfx.backgroundColor;    win.gText.blogTxt.bt1.bgPen = swatchGfx.newPen(swatchGfx.PenType.SOLID_COLOR, theColor, kSwatchBorderWidth);    win.gText.blogTxt.bt1.onDraw = drawRGBSwatch;    win.gText.blogTxt.bt1.onClick = function() {        var htmlFIle = new File(Folder.temp + "/buliarcatools.html");        var srHTM = '<html xmlns="http://www.w3.org/1999/xhtml">\n<head></head>\				<body onLoad = "window.location = \'http://buliarcatools.blog.fc2.com/\'"></body>\n</html>';        htmlFIle.open('w');        htmlFIle.write(srHTM);        htmlFIle.close();        htmlFIle.execute();        win.close();    };    initializeDrawingState(win.gText.blogTxt.bt1);    // the mail..................    win.gText.mail = win.gText.add('group');    win.gText.mail.orientation = 'stack';    win.gText.mail.mailTxt = win.gText.mail.add('statictext', undefined, 'buliarca@yahoo.com');    win.gText.mail.mailTxt.enabled = false;    win.gText.mail.bt1 = win.gText.mail.add('button', undefined, '');    win.gText.mail.bt1.preferredSize = [120, 12];    theColor = new Array(0.1, 0.1, 0.1);    var kSwatchBorderWidth = 0;    var swatchGfx = win.gText.mail.graphics;    swatchGfx.backgroundColor = swatchGfx.newBrush(swatchGfx.BrushType.SOLID_COLOR, theColor);    swatchGfx.disabledBackgroundColor = swatchGfx.backgroundColor;    win.gText.mail.bt1.bgPen = swatchGfx.newPen(swatchGfx.PenType.SOLID_COLOR, theColor, kSwatchBorderWidth);    win.gText.mail.bt1.onDraw = drawRGBSwatch;    win.gText.mail.bt1.onClick = function() {        mailWin()    };    initializeDrawingState(win.gText.mail.bt1);    // logW("win.pnl0");    win.onClose = function() {        logW('onClose');        var writeSZ = false;        var minHH = 19;        if (parseInt(app.version) == 11){//cs4            minHH = 18;        }        if (parseInt(app.version) > 15) {            minHH = 34;        }        for(var qa in winSizeFirst){            logW( "compare initWin0::" + winSizeFirst[qa] +' :: '+ intitWinSize[qa])            if(qa == 'h'){                intitWinSize[qa] = intitWinSize[qa] + minHH;            }            logW( "compare initWin1::" + winSizeFirst[qa] +' :: '+ intitWinSize[qa])            if(winSizeFirst[qa] != intitWinSize[qa]){                writeSZ = true;            }        }                if(writeSZ == true){            logW('write SZ')            var winSzF = new File(_gCurrentESHui.path + "/extras/BCMtheWinUI.jsxinc");            var strWinSz = "var winSizeFirst = {w:" + winSizeFirst.w + ", h:" + (winSizeFirst.h - minHH) + ", stick:"+ winSizeFirst.stick+"};";            winSzF.open('w');            winSzF.write(strWinSz);            winSzF.close();        }    }    win.tempB.active = true;    if (parseInt(app.version) > 15) {        win.tempB.addEventListener('keydown', function(kd) {            pressed(kd)        });    }    if (parseInt(app.version) > 11) {        win.onActivate = function() {            logW("on Activate:");            logW(" firstResz: " + firstResz);            if (firstResz == 0) {                if (parseInt(app.version) <= 15) {                    if (checkSecurityEntry(new Folder(_gCurrentESHui.path + "/extras").fsName) == false) {                        addSecurityEntry();                        alert(localize(alertAboutFlash));                    }                }                addPFl();                addResize();                firstResz = 1;            }        }        if (parseInt(app.version) > 15) {            win.onMove = function() { //the buttons are created hidden, so they will not draw, giving time to user to press one key in between                 logW('onMove');                showButtons();                if (BCMtheButtonsUI.length == 0) {                    var flBackG = win.flBackground.graphics;                    flBackG.font = ScriptUI.newFont("Tahoma", "BOLD", 20);                    var strFFAr = localize(firstLookHelpLCZ).replace(/\r/g, "");                    strFFAr = strFFAr.substring(0, strFFAr.lastIndexOf('\n'));                    win.flBackground.text = strFFAr;                }            };        }    } else {        logW('check securty');        if (checkSecurityEntry(new Folder(_gCurrentESHui.path + "/extras").fsName) == false) {            addSecurityEntry();            alert(localize(alertAboutFlash));        }        logW('cs4::::: ');        addPFl();        win.onShow = function() {            // stickWindow = winSizeFirst.stick;            setOneResize();        }        addResize();    }    // showButtons();    win.show();    // logW(allPR(ScriptUI));    function addButtons() { // for CC 2015        logW('addButtons');        if (parseInt(app.version) > 15) {            win.fl.buttons = new Array();            var i = 0            while (i < BCMtheButtonsUI.length && rde == 0) {                win.fl.buttons[i] = addMyButton(win.fl, {                        x: BCMtheButtonsUI[i].x,                        y: BCMtheButtonsUI[i].y,                        width: 100,                        height: 90                    },                    BCMtheButtonsUI[i].image == '' ? '' : (_gCurrentESHui.path + "/extras/icons/" + BCMtheButtonsUI[i].image),                    BCMtheButtonsUI[i].label,                    BCMtheButtonsUI[i].shortcut,                    true,                    rde);                win.fl.buttons[i].command = BCMtheButtonsUI[i].command;                win.fl.buttons[i].helpTip = BCMtheButtonsUI[i].toolTip;                win.fl.buttons[i].id = i;                win.fl.buttons[i].onClick = function() {                    if (this.command != "") {                        afterUI = this.command;                        if(winSizeFirst.stick == false){                            win.close();                        }else{                            if(BCMtheButtonsUI[this.id].isGroup == false){                                execAfterUI();                                afterUI = "";                             }else{                                win.close();                            }                        }                                                }                }                win.fl.buttons[i].onRightMouse = function() {                    this.context = true;                    this.notify("onDraw");                    wPos = getParents(this);                    off = {                        x: (this.bounds.width) - (this.bounds.width / 2),                        y: (this.bounds.height) - (this.bounds.height / 4)                    };                    optionsWin(wPos.x + off.x, wPos.y + off.y, this.id, this.bounds.x, this.bounds.y);                }                i++;            }            win.flBackground = win.fl.add('statictext', {                x: 0,                y: 0,                width: win.fl.bounds.width,                height: win.fl.bounds.height            }, '', {                multiline: true            })            win.flBackground.justify = 'center';            // win.flBackground = win.fl.add('statictext', {x:0, y:0, width:win.fl.bounds.width, height:win.fl.bounds.height}, '',{multiline:true})            // win.flBackground.onDraw = function(){            // 	var gfx = this.graphics;            // 	gfx.newPath();            // 	gfx.rectPath(0,0,this.bounds.width,this.bounds.height);            // 	var pen = gfx.newPen (gfx.PenType.SOLID_COLOR, [.8, .8, .8, 1], 2);            // 	gfx.strokePath (pen, gfx.currentPath);            // }        }    }    function showButtons() {        logW('showButtons');        j = 0;        for (var j = 0; j < BCMtheButtonsUI.length; j++) {            win.fl.buttons[j].visible = true;        }        win.flBackground.addEventListener('mousedown', function(kd) {            backPressed(kd)        });    }    function setOneResize() {        logW('000000');        addButtons();        if (parseInt(app.version) > 15) {            wW = win.bounds.width - 30;            wH = win.bounds.height - 80;            win.pnl0.bounds.width = wW;            win.pnl0.bounds.height = wH;            win.fl.bounds.width = wW;            win.fl.bounds.height = wH;            win.flBackground.bounds.height = wH;            win.flBackground.bounds.width = wW;        } else {            win.pnl0.bounds.width = (win.bounds.width - 30);            win.pnl0.bounds.height = (win.bounds.height - 60);            win.fl.bounds.width = (win.bounds.width - 30);            win.fl.bounds.height = (win.bounds.height - 60);        }        winSizeFirst = {            w: win.bounds.width,            h: win.bounds.height,            stick:winSizeFirst.stick        };        win.gText.bounds.y = win.pnl0.bounds.height + win.pnl0.bounds.y;        win.gText.bounds.height = 20;        win.gText.bounds.width = win.pnl0.bounds.width;        win.gText.blogTxt.bounds.x = win.pnl0.bounds.width * 0.38;        win.gText.mail.bounds.x = win.pnl0.bounds.width <= 560 ? win.pnl0.bounds.width * 0.75 : win.pnl0.bounds.width - 120;        win.gText.mail.bounds.y = 0;        win.aboutTxt.bounds.width = win.gText.blogTxt.bounds.x - 10;        win.gText.blogTxt.bounds.width = win.gText.mail.bounds.x - win.gText.blogTxt.bounds.x - 10;        win.gText.mail.bounds.width = win.pnl0.bounds.width - win.gText.mail.bounds.x;        win.mailTxt.bounds.width = win.pnl0.bounds.width - win.mailTxt.bounds.x;        logW("      " + winSizeFirst.toSource());    }    function addResize() {        logW('addingResize:');        logW("      " + winSizeFirst.toSource());        win.onResize = function() {            setOneResize();        }    }    function addPFl() {        if (parseInt(app.version) > 15) {            win.fl = win.pnl0.add('group', {                width: win.pnl0.bounds.width,                height: win.pnl0.bounds.height,                x: 0,                y: 0            });            logW("win.fl");            // alert('ssssss');        } else {            logW("adding FPL:");            // var swf = new File(_gCurrentESHui.path + "/extras/BCM_extendShortcutsUI.swf");            // var swf = new File( "f:/work/psScripts_wip/BCM_exetndShortcutsUI_sources/BCM_exetndShortcutsUI_Flash/extras/BCM_extendShortcutsUI3.swf" );            var swf = new File( _gMainESHui.path + "/extras/BCM_extendShortcutsUI.swf" );            win.fl = win.pnl0.add('flashplayer', {                width: win.pnl0.bounds.width,                height: win.pnl0.bounds.height,                x: 0,                y: 0,            }, swf);            win.fl.rghtClick = function(arr) { // needs to be first                 logW('rightClikc  from flex');                FstgX = arr[1];                FstgY = arr[2];                var posX = (win.bounds.x + 15 + FstgX);                var posY = (win.bounds.y + 30 + FstgY);                optionsWin(posX, posY, arr[0], arr[3], arr[4]);            }        }        win.fl.changePos = function(arr2) {            BCMtheButtonsUI[arr2[0]].x = arr2[1];            BCMtheButtonsUI[arr2[0]].y = arr2[2];            var btsFile = new File(_gCurrentESHui.path + "/extras/BCMtheButtonsUI.jsxinc");            btsFile.open('w');            btsFile.write(computeTextForWriting(BCMtheButtonsUI));            btsFile.close();            win.tempB.active = true;        }        win.fl.getBtns = function(idx) {            logW('getBtns');            logW(' btnsNB: ' + BCMtheButtonsUI.length);             this.invokePlayerFunction("receveBtns", BCMtheButtonsUI, _gCurrentESHui.path);        }        win.fl.getFirstLook = function() {            var myHStr = localize(firstLookHelpLCZ);            this.invokePlayerFunction("receveFirstLook", myHStr.replace(/\n/g, ""));        }        win.fl.CAlert = function(ss) {            logW(ss);            // alert(ss);        }        win.fl.btnClikc = function(idx) {            logW("btnClikc from flash");            if (BCMtheButtonsUI[idx].command != "") {                afterUI = BCMtheButtonsUI[idx].command;                if(winSizeFirst.stick == false){                    win.close();                }else{                    if(BCMtheButtonsUI[idx].isGroup == false){                        execAfterUI();                        afterUI = "";                     }else{                        win.close();                    }                }            }        }        win.fl.activeTempB = function() {            logW('activate from flex');            win.tempB.active = true; // for putting the keyboard focus on the sciptUi not on the flash        }        win.fl.chWInPos = function(arr) { // offsets the window when the alt and mouse down is pressed, will start the mouse in the center of the window            var winPos = [win.bounds.x, win.bounds.y];            win.location = [winPos[0] - arr[0], winPos[1] - arr[1]];        }    }    function addEvents() {        logW('addEvents: ');        // if(parseInt(app.version) > 15){        // }else{        win.addEventListener('keydown', function(kd) {            pressed(kd)        });        // }        logW('events added ');    };    function backPressed(k) {        if (k.button == 2) {            var newPlace = findEmptySpace();            var pnlScreen = getParents(win.fl);            // addEmptyButton(newPlace);            optionsWin((pnlScreen.x + newPlace.x) + 55, (pnlScreen.y + newPlace.y) + 55, null, newPlace.x, newPlace.y);        }    }    function pressed(k) {        logW('pressed key:::'+ k);        // firstPressAnyButton = false;        logW('firstPressAnyButton :: '+firstPressAnyButton);        rde = 1;        if(firstPressAnyButton == true){            var theKeyStr = "";            PrepressedKeys.keyName = k.keyName;            if (k.ctrlKey == true) {                theKeyStr += "Ctrl + ";                PrepressedKeys.ctrlKey = true            };            if (k.altKey == true) {                theKeyStr += "Alt + ";                PrepressedKeys.altKey = true            };            if (k.shiftKey == true) {                theKeyStr += "Shift + ";                PrepressedKeys.shiftKey = true            };            theKeyStr += k.keyName.toUpperCase();            logW('pressed keyStr::: '+ theKeyStr);            if(theKeyStr != "Ctrl + ACCENT"){// this is the shortcut for the stick command                logW('search for keyStr::: '+ theKeyStr);                for (var iC = 0; iC < BCMtheButtonsUI.length; iC++) {                    if (BCMtheButtonsUI[iC].shortcut == theKeyStr) {                        firstPressAnyButton = false;                        afterUI = BCMtheButtonsUI[iC].command;                        if(winSizeFirst.stick == false){                            win.close();                            break;                        }else{// if the window set to stick                            firstPressAnyButton = true;                            if(BCMtheButtonsUI[iC].isGroup == false){//if the button is a group it should close the window                                if(firstPressStick != true){//execute at the second press                                    if(parseInt(app.version) > 15){firstPressStick = true};                                    execAfterUI();                                    afterUI = "";                                    break;                                                                }else{                                    firstPressStick = false;                                }                            }else{                                win.close();                            }                        }                    }                }            }else{//execute at the second press                if(firstPressStick != true){                    toggleStick();                    if(parseInt(app.version) > 15){                        firstPressStick = true;                    }                }else{                    firstPressStick = false;                }            }        }    }    function mailWin() {        win.fl.invokePlayerFunction("stopActivTimer");        var winMail = new Window('dialog', 'Mail to::', undefined, {            resizeable: true,            closeButton: true,            borderless: false        });        winMail.margins = 0;        winMail.fl = winMail.add('flashplayer', {            width: 402,            height: 403,            x: 0,            y: 0,        }, "http://www.buliarca.net63.net/test/mailer.swf");        winMail.fl.margins = 0;        winMail.fl.getScriptName = function(str) {            var strSent = 'BCM_ExtendShortcutsUI';            winMail.fl.invokePlayerFunction("receveScriptName", strSent);        }        winMail.fl.closeWin = function(str) {            winMail.close();        }        winMail.fl.callAlert = function(str) {            alert(str);        }        winMail.onClose = function() {            win.fl.invokePlayerFunction("startActvTimer");        }        winMail.show();    }}function findEmptySpace() {    var em = {        x: 0,        y: 0    };    var emx = 0;    var emy = 0;    var j = 110;    var i = 0;    var arPos = arrangeExistentBtnsByPos();    while (true) {        // alert("-----" +emx+', '+emy);        if (i == arPos.length) {            // alert('buttons end');            if (((emx + j)) < win.flBackground.bounds.width) {                em = {                    x: emx,                    y: emy                };            } else {                em = {                    x: 0,                    y: emy + j                };            }            // alert('new pos:'+ em.toSource());            break;        }        if (arPos[i].x == emx && arPos[i].y == emy) {            // alert('btn HIT:'+arPos[i].label+' :: '+emx+' , '+emy);            i++;            emx = emx + j;        } else {            // alert('btnDont hit');            if (((emx + j / 2)) < win.flBackground.bounds.width) {                em = {                    x: emx,                    y: emy                };                // alert('new pos:'+ em.toSource());                break;            } else {                // alert('end one row');                emx = 0;                emy = emy + j;            }        }    }    return em;}function arrangeExistentBtnsByPos() {    emx = 0;    var emy = 0;    var d = 110;    var qA = [];    var rules = BCMtheButtonsUI.concat(qA);    var rules2 = BCMtheButtonsUI.concat(qA);    var rows = [];    var ig = 0;    while (rules.length > 0) {        var arangedArr = [];        for (var j = 0; j < rules.length; j++) {            if (rules[j].y == emy) {                arangedArr.push(rules[j]);                rules.splice(j, 1);                j--;            }        }        rows.push(arangedArr);        emy = emy + d;    }    arrTR = [];    for (var i = 0; i < rows.length; i++) {        rows[i].sort(function(a, b) {            return a.x - b.x;        })        arrTR = arrTR.concat(rows[i]);    }    return arrTR;}function getParents(obj) {    var scrP = {        x: obj.bounds.x,        y: obj.bounds.y    };    getParents0(obj);    function getParents0(ch) {        if (ch.parent != null) {            ss = ch.parent            scrP = {                x: scrP.x + ss.bounds[0],                y: scrP.y + ss.bounds[1]            };            getParents0(ss);        }    }    return scrP;}function reinitCC() {    // alert(scr);    logW('reinitCC');    // for( var b = 0; b < Window.children.length; b++){    //     logW('reinitCCBefore :: '+ b + ' == '+Window.children[b].text +' vis:'+ Window.children[b].visible);            // }    // logW(win.text);    win.close();    // for( var a = 0; a < Window.children.length; a++){    //     logW('reinitCC :: '+ a + ' == '+Window.children[a].text +' vis:'+ Window.children[a].visible);            // }    runScript_Fnct_Arguments(_gCurrentESHui+';;');}function sentUpdate(arr1) {    if (parseInt(app.version) > 15) {        if (arr1[0].idx == win.fl.buttons.length) {// when adding one button            reinitCC();        } else {            win.fl.buttons[arr1[0].idx].label = arr1[1].label;            win.fl.buttons[arr1[0].idx].shortcut = arr1[1].shortcut;            win.fl.buttons[arr1[0].idx].image = arr1[1].image;            win.fl.buttons[arr1[0].idx].command = arr1[1].command;            win.fl.buttons[arr1[0].idx].helpTip = arr1[1].toolTip;            win.fl.buttons[arr1[0].idx].notify("onDraw");        }    } else {        win.fl.invokePlayerFunction("receveUpdateBtn", arr1);    }}function toggleStick(){    if(win.stick.clicked == 1){        win.stick.clicked = 0;        winSizeFirst.stick = false;        // win.stick.dispatchEvent('onDraw');        // _2winDraw(win.stick);        win.stick.notify('onDraw');        logW("setPersist");    }else{        win.stick.clicked = 1;        winSizeFirst.stick = true;        // _2winDraw(win.stick);        // win.stick.dispatchEvent('onDraw');        win.stick.notify('onDraw');        logW("setPersist");    }}function isESHui( ff ){    var tR = false;    var strC = '/*\<javascriptresource>\  <category>BCM_ESHui</category>\</javascriptresource>\*/';    var mF = new File(ff);    mF.open('r');    var str = mF.read(strC.length);    if(str == strC){        tR = true;    }    mF.close();    return tR;}function setTheMonoFont( objDD ){    // objDD.graphics.font = ScriptUI.newFont("Candara","BOLD",16);    try{        objDD.graphics.font = ScriptUI.newFont("Candara","BOLD",16);        objDD.graphics.foregroundColor = objDD.graphics.newPen(objDD.graphics.PenType.SOLID_COLOR, [.3, .3, .3, 1], 20);      }catch(err){          objDD.graphics.font = ScriptUI.newFont("Tahoma","REGULAR",12);      }    // monoFontList = new Array("Courier","Andale Mono", "Consolas","DejaVu Sans Mono", "Droid Sans Mono", "Everson Mono","Fixedsys","HyperFont",    //                           "Inconsolata","Letter Gothic","Lucida Console","Monaco","monofur","PragmataPro","Prestige","ProFont",    //                           "Tex Gyre Cursor","Trixie","UM Typewriter");    // for(a=0;a<monoFontList.length;a++){    //   try{    //     objDD.graphics.font = ScriptUI.newFont(monoFontList[a],"BOLD",12);    //     break;    //   }catch(err){    //       objDD.graphics.font = ScriptUI.newFont("Tahoma","REGULAR",12);    //   }    // }}function setTheDescFont( objDD ){    objDD.graphics.font = ScriptUI.newFont("Arial","REGULAR",12);}function computeTextForWriting(buttons){    var strTW = "var BCMtheButtonsUI = new Array();\n";    for (var ai = 0; ai < buttons.length; ai++) {        var theIMG = buttons[ai].image;        var cmc = buttons[ai].command;        var strtt = '\u005C';        cmc = cmc.replace(/\\/g, (strtt + "" + strtt));        cmc = cmc.replace(new RegExp('\r?\n', 'g'), strtt + "\n");        cmc = cmc.replace(/\"/g, ("\\" + "\""));        var dmc = buttons[ai].toolTip;        dmc = dmc.replace(/\\/g, (strtt + "" + strtt));        dmc = dmc.replace(new RegExp('\r?\n', 'g'), strtt + "\n");        dmc = dmc.replace(/\"/g, ("\\" + "\""));        var dml = buttons[ai].label;        dml = dml.replace(/\n/g, "\\n");        strTW += ('BCMtheButtonsUI[' + ai + ']={'                    +'image:"' + theIMG                     + '", shortcut:"' + buttons[ai].shortcut                     + '", label:"' + dml                    + '", command:"' + cmc                     + '", toolTip:"' + dmc                     + '", x:' + buttons[ai].x                     + ', y:' + buttons[ai].y                     + ', isGroup:' + buttons[ai].isGroup                     + '};\n');    }      return strTW;  }function optionsWin(x, y, btn, cX, cY) {    logW(" optionsWin: " + x + " , " + y + " , " + btn + " , " + cX + " , " + cY);    if (btn == null) {        var nb = BCMtheButtonsUI.length;        var toAdd = true;        var MBObj = {            image: "",            shortcut: "",            label: "",            command: "",            toolTip: ""        };    } else {        var nb = btn;        var toAdd = false;        var MBObj = BCMtheButtonsUI[parseInt(nb)]    }    // var bordLess = IsMacintoshOS() ? false : true;    var bordLess = false;    var win2 = new Window('dialog', '', undefined, {        resizeable: true,        closeButton: true,        borderless: bordLess    });    g2 = win2.graphics;    var myBrush1 = g2.newBrush(g2.BrushType.SOLID_COLOR, [0.99, 0.99, 0.99, 1]);    if (parseInt(app.version) <= 15) {        g2.backgroundColor = myBrush1;    }    win2.alignChildren = 'left';    win2.orientation = 'column';    win2.location = [x, y];    win2.newGroupLabelName = "";    win2.et0 = win2.add('statictext', undefined, '');    if (toAdd == false) {        win2.g0 = win2.add('panel', undefined, '');        win2.g0.alignment = 'fill';        win2.delB = win2.g0.add('button', undefined, localize(btnDelLcz));        win2.delB.helpTip = localize(btnDelToolTipLcz);        win2.delB.preferredSize = [30, 30];        win2.delB.alignment = 'fill';        win2.delB.onClick = function() {            BCMtheButtonsUI.splice(nb, 1);            var btsFile = new File(_gCurrentESHui.path + "/extras/BCMtheButtonsUI.jsxinc");            btsFile.open('w');            btsFile.write(computeTextForWriting(BCMtheButtonsUI));            btsFile.close();            win2.close();            win.tempB.active = true;            logW("============================================");            if (parseInt(app.version) > 15) {                reinitCC();            } else {                win.fl.invokePlayerFunction('reinit');            }        };    } else {        win2.g0 = win2.add('panel', undefined, '');        win2.g0.alignment = 'fill';        win2.addB = win2.g0.add('button', undefined, localize(btnAddLcz));        win2.addB.helpTip = localize(btnAddToolTipLcz);        win2.addB.preferredSize = [30, 30];        win2.addB.alignment = 'fill';        win2.addB.onClick = function() {            win2.okBt.notify('onClick')        };    }    win2.pnl = win2.add('panel', undefined, localize(pnlPropLcz));    win2.pnl.orientation = 'column';    win2.pnl.alignChildren = 'left';    win2.g1 = win2.pnl.add('group');    win2.g1.orientation = 'row';    win2.lbT = win2.g1.add('statictext', undefined, localize(lbTLcz));    win2.lbT.preferredSize = [80, 20];    win2.lbO = win2.g1.add('edittext', undefined, MBObj.label, {        multiline: true    });    win2.lbO.preferredSize = [290, 60];    win2.lbO.helpTip = localize(lbTToolTipLcz);    if(MBObj.label == "" || toAdd == true){        win2.asGroupBtn = win2.g1.add('button', undefined, localize(asGroupBtnLcz));        win2.asGroupBtn.preferredSize = [110, 20];        win2.asGroupBtn.onClick = function(){            if(win2.lbO.text == ""){                alert("To create a new groupUI you first have to put a name in the label area");            }else{                win2.newGroupLabelName = ("BCM_" + win2.lbO.text);                win2.comO.text = 'runScript_Fnct_Arguments(_gESHFolder + "/'+ win2.newGroupLabelName +'/'+win2.newGroupLabelName+'.jsxinc;;" );';                            }        }    }    win2.g2 = win2.pnl.add('group');    win2.g2.orientation = 'row';    win2.descT = win2.g2.add('statictext', undefined, localize(descTLcz));    win2.descT.preferredSize = [80, 20];    var dcc = MBObj.toolTip;    dcc = dcc.replace(/\\\"/g, "\"");    dcc = dcc.replace(/\\\n/g, "\n");    win2.descO = win2.g2.add('edittext', undefined, dcc, {        multiline: true,        scrollable: true    });    win2.descO.preferredSize = [290, 50];    win2.descO.helpTip = localize(descToolTipLcz);    win2.g3 = win2.pnl.add('group'); //INSERISCI ICONA    win2.g3.orientation = 'row';    win2.iconT = win2.g3.add('statictext', undefined, localize(iconTLcz));    win2.iconT.preferredSize = [80, 20];    var swfPath = _gCurrentESHui.path + "/extras/icons/"; //temp    var imgPth = MBObj.image;    win2.iconO = win2.g3.add('edittext', undefined, imgPth);    win2.iconO.preferredSize = [230, 20];    win2.iconO.helpTip = localize(iconToolTipLcz);    win2.icoB = win2.g3.add('button', undefined, localize(browseTLcz));    win2.icoB.preferredSize = [50, 20];    win2.icoB.helpTip = localize(broseToolTipLcz);    win2.icoB.onClick = function() {        var newIc = MBbrowse(swfPath + "/icons");        if (newIc != "") {            var theFile = new File(newIc);            var copyTo = new File(swfPath + "/" + theFile.name);            if (theFile.toString() != copyTo.toString()) {                theFile.copy(new File(swfPath + "/" + theFile.name));            }            win2.iconO.text = new File(newIc).name.toString();            this.active = true;        } else {            this.active = true        }    }    win2.icoEdtB = win2.g3.add('button', undefined, localize(editTLcz));    win2.icoEdtB.preferredSize = [110, 20];    win2.icoEdtB.helpTip = localize(broseToolTipLcz);    win2.icoEdtB.onClick = function() {        if (imgPth != "") {            var theIMgEd = new File(swfPath + "/" + imgPth)        } else {            var theIMgEd = win2.lbO.text != "" ? new File(swfPath + "/" + win2.lbO.text.replace(/\n/g, " ") + ".png") : new File(swfPath + "/" + "Untiled" + ".png")        }        if (win2.lbO.text != "" || imgPth != "") {            if (theIMgEd.exists) {                var idOpn = charIDToTypeID("Opn ");                var desc210 = new ActionDescriptor();                var idnull = charIDToTypeID("null");                desc210.putPath(idnull, theIMgEd);                executeAction(idOpn, desc210, DialogModes.NO);                win2.okBt.notify('onClick');                win.close();            } else {                // =======================================================                var idMk = charIDToTypeID("Mk  ");                var desc215 = new ActionDescriptor();                var idNw = charIDToTypeID("Nw  ");                var desc216 = new ActionDescriptor();                var idMd = charIDToTypeID("Md  ");                var idRGBM = charIDToTypeID("RGBM");                desc216.putClass(idMd, idRGBM);                var idWdth = charIDToTypeID("Wdth");                var idRlt = charIDToTypeID("#Rlt");                desc216.putUnitDouble(idWdth, idRlt, 100.000000);                var idHght = charIDToTypeID("Hght");                var idRlt = charIDToTypeID("#Rlt");                desc216.putUnitDouble(idHght, idRlt, 100.000000);                var idRslt = charIDToTypeID("Rslt");                var idRsl = charIDToTypeID("#Rsl");                desc216.putUnitDouble(idRslt, idRsl, 72.000000);                var idpixelScaleFactor = stringIDToTypeID("pixelScaleFactor");                desc216.putDouble(idpixelScaleFactor, 1.000000);                var idFl = charIDToTypeID("Fl  ");                var idFl = charIDToTypeID("Fl  ");                var idWht = charIDToTypeID("Wht ");                desc216.putEnumerated(idFl, idFl, idWht);                var idDpth = charIDToTypeID("Dpth");                desc216.putInteger(idDpth, 8);                var idprofile = stringIDToTypeID("profile");                desc216.putString(idprofile, """sRGB IEC61966-2.1""");                var idDcmn = charIDToTypeID("Dcmn");                desc215.putObject(idNw, idDcmn, desc216);                executeAction(idMk, desc215, DialogModes.NO);                // =======================================================                var idMk = charIDToTypeID("Mk  ");                var desc217 = new ActionDescriptor();                var idnull = charIDToTypeID("null");                var ref96 = new ActionReference();                var idLyr = charIDToTypeID("Lyr ");                ref96.putClass(idLyr);                desc217.putReference(idnull, ref96);                executeAction(idMk, desc217, DialogModes.NO);                // =======================================================                var idDlt = charIDToTypeID("Dlt ");                var desc218 = new ActionDescriptor();                var idnull = charIDToTypeID("null");                var ref97 = new ActionReference();                var idLyr = charIDToTypeID("Lyr ");                var idBckg = charIDToTypeID("Bckg");                ref97.putProperty(idLyr, idBckg);                desc218.putReference(idnull, ref97);                executeAction(idDlt, desc218, DialogModes.NO);                // =======================================================                var idsave = charIDToTypeID("save");                var desc219 = new ActionDescriptor();                var idAs = charIDToTypeID("As  ");                var desc220 = new ActionDescriptor();                var idPGIT = charIDToTypeID("PGIT");                var idPGIT = charIDToTypeID("PGIT");                var idPGIN = charIDToTypeID("PGIN");                desc220.putEnumerated(idPGIT, idPGIT, idPGIN);                var idPNGf = charIDToTypeID("PNGf");                var idPNGf = charIDToTypeID("PNGf");                var idPGAd = charIDToTypeID("PGAd");                desc220.putEnumerated(idPNGf, idPNGf, idPGAd);                var idCmpr = charIDToTypeID("Cmpr");                desc220.putInteger(idCmpr, 9);                var idPNGF = charIDToTypeID("PNGF");                desc219.putObject(idAs, idPNGF, desc220);                var idIn = charIDToTypeID("In  ");                desc219.putPath(idIn, theIMgEd);                var idDocI = charIDToTypeID("DocI");                desc219.putInteger(idDocI, 1459);                var idCpy = charIDToTypeID("Cpy ");                desc219.putBoolean(idCpy, true);                var idsaveStage = stringIDToTypeID("saveStage");                var idsaveStageType = stringIDToTypeID("saveStageType");                var idsaveBegin = stringIDToTypeID("saveBegin");                desc219.putEnumerated(idsaveStage, idsaveStageType, idsaveBegin);                executeAction(idsave, desc219, DialogModes.NO);                app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);                // =======================================================                var idOpn = charIDToTypeID("Opn ");                var desc282 = new ActionDescriptor();                var idnull = charIDToTypeID("null");                desc282.putPath(idnull, theIMgEd);                executeAction(idOpn, desc282, DialogModes.NO);                win2.iconO.text = theIMgEd.name.toString().replace(/%20/g, " ");                win2.okBt.notify('onClick');                win.close();            }        }    }    win2.g4 = win2.pnl.add('group'); //SCORCIATOGIA DI TASTIERA    win2.g4.orientation = 'row';    win2.shT = win2.g4.add('statictext', undefined, localize(shTLcz));    win2.shT.preferredSize = [80, 20];    if (parseInt(app.version) > 15) {        win2.shO = win2.g4.add('button', undefined, MBObj.shortcut);        win2.shO.addEventListener('click', function(kd) {            kd.target.active = true        });    } else {        win2.shO = win2.g4.add('edittext', undefined, MBObj.shortcut);    }    win2.shO.onActivate = function() {        win2.shO.addEventListener('keydown', function(kd) {            setShortcut(kd)        })    };    win2.shO.preferredSize = [290, 20];    win2.shO.helpTip = localize(shToolTipLcz);    win2.shTTmp = win2.g4.add('edittext', undefined, "");    win2.shTTmp.preferredSize = [1, 1];    win2.shTTmp.visible = false;    win2.g5 = win2.pnl.add('group');    win2.g5.orientation = 'row';    win2.comT = win2.g5.add('statictext', undefined, localize(comTLcz));    win2.comT.preferredSize = [70, 20];    var tcc = MBObj.command;    tcc = tcc.replace(/\\\"/g, "\"");    tcc = tcc.replace(/\\\n/g, "\n");    win2.comO = win2.g5.add('edittext', undefined, tcc, {        multiline: true,        scrollable: true    });    win2.comO.preferredSize = [300, 150];       // win2.comO.graphics.font = editTextFont;    win2.comO.helpTip = localize(comToolTipLcz);    win2.comBtG = win2.g5.add('panel', undefined, "");    win2.comBtG.orientation = 'column';    win2.comBtG.alignment = 'fill';    win2.comStG = win2.comBtG.add('statictext', undefined, localize(brsFroTLcz));    win2.comB = win2.comBtG.add('button', undefined, localize(scrBtLcz));    // win2.comB.preferredSize = [50, 75];    win2.comB.margins = 0;    win2.comB.helpTip = localize(scrBtToolTipLcz);    win2.comB.onClick = function() {        var newFC = MBbrowse("");        // var extFC = new File(newFC).name;        // var extFC0 = extFC.substring(extFC.indexOf("."), extFC.length);        if (newFC != "") {            var isRelativePth = isRelativePathToGlobalVars(newFC);            var execJSXStr = 'runScript_Fnct_Arguments(';            if(isRelativePth.variable != ""){                execJSXStr += (isRelativePth.variable + ' + "'+isRelativePth.rest + ';;");')            }else{                execJSXStr += ('"'+new File(newFC) +';;");');            }            win2.comO.text += ("\n" + execJSXStr);            this.active = true;        } else {            this.active = true;        }    }    win2.comB1 = win2.comBtG.add('button', undefined, localize(actTLcz));    win2.comB1.margins = 0;    win2.comB1.onClick = function() {        actionsUI(win2.bounds.x - 100, win2.bounds.y + 200);    }    win2.comB2 = win2.comBtG.add('button', undefined, localize(brshTLcz));    win2.comB2.margins = 0;    win2.comB2.onClick = function() {        var sbsbs = searchBrshUI(win2.bounds.x - 300, win2.bounds.y - 100);        win2.comO.text = sbsbs;        win2.lbO.text = sbsbs.substring(sbsbs.indexOf('("') + 2, sbsbs.indexOf('")'));    }    win2.comB2.helpTip = localize(brshTtToolTipLcz);    // win2.comB1.preferredSize = [50, 75];    win2.g6 = win2.pnl.add('group'); //PULSANTE  CANCELLA    win2.g6.alignment = 'fill';    win2.g6.orientation = 'stack';    win2.cancelBt = win2.g6.add('button', undefined, localize(cancelTLcz));    win2.cancelBt.alignment = 'left';    win2.cancelBt.preferredSize = [120, 50];    win2.cancelBt.onClick = function() {        // sentUpdate(  [{idx:nb}, BCMtheButtonsUI[nb]] );        win2.close();    }    win2.okBt = win2.g6.add('button', undefined, localize(applyTLcz)); //PULSANTE  APPLICA    win2.okBt.preferredSize = [120, 50];    win2.okBt.alignment = 'right';    win2.okBt.onClick = function() {        logW('bbbbbbbbbbb::::::::::;')        if(win2.newGroupLabelName != ""){//if the as new group was pressed create the new folders             var ngUIFolder = new Folder( _gESHFolder +'/'+win2.newGroupLabelName);            ngUIFolder.create();            var ngUIFile = new File ( ngUIFolder + '/'+win2.newGroupLabelName+'.jsxinc');                ngUIFile.open('w');                ngUIFile.write('/*\<javascriptresource>\  <category>BCM_ESHui</category>\</javascriptresource>\*/\var _gCurrentESHui = File($.fileName);\\#include "../_main/main.jsxinc";\#include "extras/BCMtheButtonsUI.jsxinc";\#include "extras/BCMtheWinUI.jsxinc";\\main();\execAfterUI();');            ngUIFile.close();            var ngUIextrasUIFolder = new Folder(ngUIFolder +'/extras');                ngUIextrasUIFolder.create();            var ngUIextrasUIButtonsUIFile = new File(ngUIextrasUIFolder +'/BCMtheButtonsUI.jsxinc');                ngUIextrasUIButtonsUIFile.open('w');                ngUIextrasUIButtonsUIFile.write('var BCMtheButtonsUI = new Array();');                ngUIextrasUIButtonsUIFile.close();            var ngUIextrasUItheWinUIFile = new File(ngUIextrasUIFolder +'/BCMtheWinUI.jsxinc');                ngUIextrasUItheWinUIFile.open('w');                ngUIextrasUItheWinUIFile.write('var winSizeFirst = {w:1000, h:297};');                ngUIextrasUItheWinUIFile.close();            var ngUIiconsUIFolder = new Folder(ngUIextrasUIFolder +'/icons');                ngUIiconsUIFolder.create();        }        var idealPosX = (Math.round(cX / 110)) * 110;        var idealPosY = (Math.round(cY / 110)) * 110;        logW('idealPosX ::'+idealPosX);        logW('idealPosY ::'+idealPosY);        var isGrpp = false;        if(nb != BCMtheButtonsUI.length){//get the old value for the group            isGrpp = BCMtheButtonsUI[parseInt(nb)].isGroup == true?true:false;        }else{            var isGrpp = win2.newGroupLabelName !== ""?true:false;        }        var resObj = {            image: win2.iconO.text,            shortcut: win2.shO.text,            label: win2.lbO.text,            command: win2.comO.text,            toolTip: win2.descO.text,            x: idealPosX,            y: idealPosY,            isGroup:isGrpp        };        // logW('isGorupo:::: '+ resObj.isGroup);        // logW('isGorup:::: '+ resObj.isGroup);        BCMtheButtonsUI[parseInt(nb)] = resObj;        //if the user chosed to use the duplicated shortcut for this button the  the other button will have it's shortcut deleted         if(resObj.shortcut != ""){            var checkSHExist = checkIfShortcutExists(resObj.shortcut);            if (checkSHExist.exists == true) {                BCMtheButtonsUI[checkSHExist.index].shortcut = "";                sentUpdate([{                    idx: checkSHExist.index                }, BCMtheButtonsUI[checkSHExist.index]]);            }        }        var btsFile = new File(_gCurrentESHui.path + "/extras/BCMtheButtonsUI.jsxinc");        btsFile.open('w');        btsFile.write(computeTextForWriting(BCMtheButtonsUI));        btsFile.close();        win2.close();        sentUpdate([{            idx: nb        }, BCMtheButtonsUI[nb]]);        // if(win2.newGroupLabelName != ""){        //     afterUI = win2.comO.text;        //     win.close();        // }    }    // win2.defaultElement = win2.okBt;    win2.cancelElement = win2.cancelBt;    win2.firstResize = true;    win2.firstShowWidth = 0;    win2.firstShowHeight = 0;    // the fonts     setTheDescFont(win2.lbO);    setTheDescFont(win2.descO);    setTheMonoFont(win2.comO);    win2.toResizeArray = [  //array for rules when resizing                            {obj:win2.g0, x:null, y:null, w:1, h:null, offsetX:0, offsetY: 0},                                {obj:win2.delB, x:null, y:null, w:1, h:null, offsetX:0, offsetY: 0},                                {obj:win2.addB, x:null, y:null, w:1, h:null, offsetX:0, offsetY: 0},                                                        {obj:win2.pnl, x:null, y:null, w:1, h:1, offsetX:0, offsetY: 0},                                {obj:win2.g1, x:null, y:null, w:1, h:.1, offsetX:0, offsetY: 0},                                    {obj:win2.lbO, x:null, y:null, w:1, h:.1, offsetX:0, offsetY: 0},                                    {obj:win2.asGroupBtn, x:win2.lbO, y:null, w:null, h:null, offsetX:0, offsetY: 0},                                {obj:win2.g2, x:null, y:win2.g1, w:1, h:.3, offsetX:0, offsetY: 0},                                    {obj:win2.descO, x:null, y:null, w:1, h:.3, offsetX:0, offsetY: 0},                                {obj:win2.g3, x:null, y:win2.g2, w:1, h:null, offsetX:0, offsetY: 0},                                    {obj:win2.iconO, x:null, y:null, w:1, h:null, offsetX:0, offsetY: 0},                                    {obj:win2.icoB, x:win2.iconO, y:null, w:null, h:null, offsetX:0, offsetY: 0},                                    {obj:win2.icoEdtB, x:win2.icoB, y:null, w:null, h:null, offsetX:0, offsetY: 0},                                                                {obj:win2.g4, x:null, y:win2.g3, w:1, h:null, offsetX:0, offsetY: 0},                                    {obj:win2.shO, x:null, y:null, w:1, h:null, offsetX:0, offsetY: 0},                                {obj:win2.g5, x:null, y:win2.g4, w:1, h:.6, offsetX:0, offsetY: 0},                                    {obj:win2.comO, x:null, y:null, w:1, h:.6, offsetX:0, offsetY: 0},                                    {obj:win2.comBtG, x:win2.comO, y:null, w:null, h:null, offsetX:0, offsetY: 0},                                {obj:win2.g6, x:null, y:win2.g5, w:1, h:null, offsetX:0, offsetY: 0},                                    {obj:win2.okBt, x:win2.g6, y:null, w:null, h:null, offsetX:-150, offsetY: 0},                        ]    win2.onShow = function() {        // logW('++++++++++++++++++++++++++++++++++++++++');        // logW('win2 Bnds show : ');        win2.firstResize = true;        win2.firstShowWidth = win2.bounds.width;        win2.firstShowHeight = win2.bounds.height;        adjustPositionToMachScreen();        // logW('++++++++++++++++++++++++++++++++++++++++');    }    win2.onClose = function() {        if (parseInt(app.version) > 15) {            win.fl.buttons[nb].context = false;            win.fl.buttons[nb].notify("onDraw");        }    }    win2.onResize = function(){        if(win2.firstResize != true){            var win2Bnds = win2.bounds;            var addWidth = win2Bnds.width - win2.firstShowWidth;            var addHeight = (win2Bnds.height - win2.firstShowHeight);            // logW(' : ---------------------------');            // logW('win2 addWidth : '+ addWidth);            for (var f=0; f<win2.toResizeArray.length; f++){                try{                    var arrayObj = win2.toResizeArray[f];                    var toRszObj = win2.toResizeArray[f].obj;                    var toRszObjBnds = toRszObj.bounds;                    // logW('win2 toRszObj :'+ toRszObj);                    win2.toResizeArray[f].obj.bounds = [                                                 toRszObjBnds[0],                                                toRszObjBnds[1],                                                win2.toResizeArray[f].w!=null?toRszObjBnds[2]+(addWidth*win2.toResizeArray[f].w):toRszObjBnds[2],                                                win2.toResizeArray[f].h!=null?toRszObjBnds[3]+(addHeight*win2.toResizeArray[f].h):toRszObjBnds[3]                                                ]                    if(arrayObj.x!=null){                        var refObjX = win2.toResizeArray[f].x;                        toRszObj.bounds.x = (refObjX.bounds.x + refObjX.bounds.width + 10)+arrayObj.offsetX;                        win2.toResizeArray[f].obj.bounds.width = toRszObjBnds.width;                    }                    if(arrayObj.y!=null){                        var refObj = win2.toResizeArray[f].y;                        toRszObj.bounds.y = (refObj.bounds.y + refObj.bounds.height + 10)+arrayObj.offsetY;                        // logW('win2 refObj.h :'+ refObj.bounds.height );                        // logW('win2 refObj.y :'+ refObj.bounds.y );                        // logW('win2 movedTo :'+ toRszObj.bounds.y );                        toRszObj.bounds.height = toRszObjBnds.height+(addHeight*arrayObj.h);                    }                }catch(err){}            }            // logW(': ---------------------------');            win2.firstShowWidth = win2.bounds.width;            win2.firstShowHeight = win2.bounds.height;        }else{            win2.firstResize = false;        }    }    win2.show();    function getAllChildsElements( obj ){        var xxx = [];        function getCh(obj){            xxx.push(obj);            for( var a=0; a<obj.children.length; a++){                getCh(obj.children[a]);            }        }        getCh(obj);        return xxx;    }    function adjustPositionToMachScreen() {        var cPos = win2.location;        var theSHeight = $.screens[0].bottom;        var theSWidth = $.screens[0].right;        var Ww = win2.bounds.width;        var Wh = win2.bounds.height;        var newLocation = cPos;        if ((cPos[0] + Ww) > theSWidth) {            newLocation[0] = theSWidth - Ww;        }        if ((cPos[1] + Wh) > theSHeight) {            newLocation[1] = theSHeight - Wh;        }        win2.location = newLocation;    }    function setShortcut(k) {        // alert(win2.shTTmp.active);        win2.shTTmp.active = true; // set the key focus to this, because the listener is triggered before the text was changed        win2.shO.enabled = false;        // alert(win2.shTTmp.active);        var theKeyStr = "";        if (k.ctrlKey == true) {            theKeyStr += "Ctrl + "        };        if (k.altKey == true) {            theKeyStr += "Alt + "        };        if (k.shiftKey == true) {            theKeyStr += "Shift + "        };        theKeyStr += k.keyName.toString().toUpperCase();        if (k.keyName == "Backspace") {            theKeyStr = ""        };        if (k.keyName == "Delete") {            theKeyStr = ""        };        if (k.keyName != "Escape") {};        if(theKeyStr == 'Ctrl + ACCENT'){// check to see if the shorcut is for the stick window            alert(localize(shortcutPersistentWin));            theKeyStr = "";            win2.shO.text = theKeyStr;            win2.shO.enabled = true;        }else{            var chkSHH = checkIfShortcutExists(theKeyStr);            win2.shO.text = theKeyStr;            win2.shO.enabled = true;            if (chkSHH.exists == true) {                var userForShortcut = confirm(localize(shortcutExistsLcz, chkSHH.button.label.replace(/\n/g, " "), theKeyStr));                if (userForShortcut == true) {                    win2.shO.text = theKeyStr;                    win2.shO.enabled = true;                } else {                    win2.shO.enabled = true;                    win2.shO.text = "";                }            }        }        if (parseInt(app.version) > 15) {            win2.shO.active = true;        }            }    function checkIfShortcutExists(sh) {        var rt = {            exists: false,            button: null,            index: null        };        for (var i = 0; i < BCMtheButtonsUI.length; i++) {            if (BCMtheButtonsUI[i].shortcut == sh) {                if (i != btn) {                    rt = {                        exists: true,                        button: BCMtheButtonsUI[i],                        index: i                    };                    break;                }            }        }        return rt;    }    function MBbrowse(str) {        if (str != "") {            var Ff = new File(str);            var pathSyS = new Folder(Ff.path).fsName;            copyTextToClipboard(pathSyS);            $.sleep(100);            pasteTextFromClipboard();            var theSlFile = File.openDialog("", "*", true);        } else {            var theSlFile = File.openDialog("", "*", true);        }        if (theSlFile != null) {            return theSlFile;        } else {            return ""        };    }    function copyTextToClipboard(txt) {        if (IsMacintoshOS()) {            var mbStr = "echo '" + txt + "' | pbcopy";            app.system(mbStr);        } else {            var mbStr = "echo " + txt + "|clip";            app.system(mbStr);        }    }    function pasteTextFromClipboard() {        if (IsMacintoshOS()) {            // theCopyBat = new File(_gCurrentESHui.path + "/extras/paste.command");            theCopyBat = new File( _gMainESHui.path + "/extras/paste.command" );            theCopyBat.execute();        } else {            // theCopyBat = new File(_gCurrentESHui.path + "/extras/paste.vbs");            theCopyBat = new File( _gMainESHui.path + "/extras/paste.vbs" );            theCopyBat.execute();        }    }    function IsMacintoshOS() {        if ($.os.search(/macintosh/i) != -1) {            return true;        } else {            return false;        }    }    function IsWindowsOS() {        if ($.os.search(/windows/i) != -1) {            return true;        } else {            return false;        }    }    function actionsUI(x, y) {        var actionList = getActionSets();        var win3 = new Window('dialog', localize(actWinTLcz), undefined, {            resizeable: false,            closeButton: true,            borderless: false        });        win3.location = [x, y];        if (parseInt(app.version) <= 15) {            g3 = win3.graphics;            var myBrush1 = g3.newBrush(g3.BrushType.SOLID_COLOR, [0.99, 0.99, 0.99, 1]);            g3.backgroundColor = myBrush1;        }        win3.alignChildren = 'left';        win3.orientation = 'column';        // alert( actionList.toSource());        win3.g1 = win3.add('group');        win3.g1.orientation = 'row';        win3.setSt = win3.g1.add('statictext', undefined, localize(actSetTLcz));        win3.setSt.preferredSize = [43, 20];        var sets = [];        for (var ah = 0; ah < actionList.length; ah++) {            sets.push(actionList[ah].name);        }        win3.setDr = win3.g1.add('dropdownList', undefined, sets);        win3.setDr.onChange = function() {            var it = win3.setDr.selection;            var itIDX = 0;            for (var qw = 0; qw < win3.setDr.items.length; qw++) {                if (win3.setDr.items[qw] == it) {                    itIDX = qw;                    break;                }            }            var Lactions = actionList[itIDX].actions;            while (win3.actDr.items.length != 0) {                win3.actDr.remove(win3.actDr.items[0]);            }            for (var ca = 0; ca < Lactions.length; ca++) {                win3.actDr.add('item', Lactions[ca]);            }        }        win3.g2 = win3.add('group');        win3.actSt = win3.g2.add('statictext', undefined, localize(actT2Lcz));        win3.actDr = win3.g2.add('dropdownList', undefined, sets);        win3.onShow = function() {            while (win3.actDr.items.length != 0) {                win3.actDr.remove(win3.actDr.items[0]);            }        }        win3.g3 = win3.add('group');        win3.g3.orientation = 'stack';        win3.g3.alignment = 'fill';        win3.cancelBt = win3.g3.add('button', undefined, localize(cancelTLcz));        win3.cancelBt.alignment = 'left';        win3.cancelBt.onClick = function() {            win3.close()        };        win3.okBt = win3.g3.add('button', undefined, localize(okTLcz));        win3.okBt.alignment = 'right';        win3.okBt.onClick = function() {            var it = win3.setDr.selection;            var setIDX = 1;            for (var qe = 0; qe < win3.setDr.items.length; qe++) {                if (win3.setDr.items[qe] == it) {                    setIDX = actionList[qe].index;                    setName = actionList[qe].name;                    break;                }            }            for (var qr = 0; qr < win3.actDr.items.length; qr++) {                if (win3.actDr.items[qr] == win3.actDr.selection) {                    actIDX = qr + 1;                    actName = win3.actDr.selection.text;                    break;                }            }            // alert(setIDX + " :: " + actIDX);            var strPlay = '\					' + localize(helpCodePlayActLcz) + '' + actName + '' + localize(helpCodeFromSetLcz) + '' + setName + '\					playAction("' + actName + '", "' + setName + '");';            win2.comO.text += ("\n" + strPlay);            win3.close();        }        win3.show();    }}// }function runJSX(jsxScript) {    var desc23 = new ActionDescriptor();    desc23.putPath(charIDToTypeID("jsCt"), new File(jsxScript));    desc23.putString(charIDToTypeID("jsMs"), "undefined");    executeAction(stringIDToTypeID("AdobeScriptAutomation Scripts"), desc23, DialogModes.NO);}function playAction(Aname, Aset) {    var desc204 = new ActionDescriptor();    var ref20 = new ActionReference();    ref20.putName(charIDToTypeID("Actn"), Aname);    ref20.putName(charIDToTypeID("ASet"), Aset);    desc204.putReference(charIDToTypeID("null"), ref20);    executeAction(charIDToTypeID("Ply "), desc204, DialogModes.NO);}function isRelativePathToGlobalVars( objS ){    var aPath = objS.toString().split("/");    var _gPthArray = [  {obj:'_gESHFolder', arr:_gESHFolder.toString().split("/")},                        {obj:'_gMainESHui.path', arr:_gMainESHui.path.toString().split("/")},                        {obj:'_gCurrentESHui.path', arr:_gCurrentESHui.path.toString().split("/")}                        ];//only relatives objects    var match = {variable:'', rest:''};    var resIDX = 0;    for(var i=0; i<_gPthArray.length; i++){        var ss = false;        // logW('relativePath ::+++++++++++++++++++++++++++++');        // logW('relativePath ::' + _gPthArray[i].obj);        // logW('relativePath ::' + _gPthArray[i].arr.toSource());        // logW('relativePath ::' + aPath.toSource());        for(var j=0; j<_gPthArray[i].arr.length; j++){            // logW('relativePath ::' + aPath[j] + ' :: '+ _gPthArray[i].arr[j]);            if( aPath[j] == _gPthArray[i].arr[j]){                ss = true;                // logW('\t ========== true');            }else{                ss = false;                // logW('\t ========== false');                // logW('\t ========== idx:: '+j);                break;            }        }        if(ss == true){            resIDX = j;            // logW('\t ========== idx:: '+j);            match.variable = _gPthArray[i].obj;        }        // logW('relativePath ::+++++++++++++++++++++++++++++');    }    if(match.variable != ''){        for(var k = resIDX; k<aPath.length; k++){            match.rest += ('/'+aPath[k]);        }    }    // logW('relativePath  to::' + match.toSource());    return match;}function getActionSets() {    //code from http://forums.adobe.com/message/4805055#4805055    //thank you Paul Riggott    cTID = function(s) {        return app.charIDToTypeID(s);    };    var i = 1;    var sets = [];    while (true) {        var ref = new ActionReference();        ref.putIndex(cTID("ASet"), i);        var desc;        var lvl = $.level;        $.level = 0;        try {            desc = executeActionGet(ref);        } catch (e) {            break;        } finally {            $.level = lvl;        }        if (desc.hasKey(cTID("Nm  "))) {            var set = {};            set.index = i;            set.name = desc.getString(cTID("Nm  "));            set.toString = function() {                return this.name;            };            set.count = desc.getInteger(cTID("NmbC"));            set.actions = [];            for (var j = 1; j <= set.count; j++) {                var ref = new ActionReference();                ref.putIndex(cTID('Actn'), j);                ref.putIndex(cTID('ASet'), set.index);                var adesc = executeActionGet(ref);                var actName = adesc.getString(cTID('Nm  '));                set.actions.push(actName);            }            sets.push(set);        }        i++;    }    return sets;};/*****************************************************************************/function IsMacintoshOS() {    if ($.os.search(/macintosh/i) != -1) {        return true;    } else {        return false;    }}/*****************************************************************************/function IsWindowsOS() {    if ($.os.search(/windows/i) != -1) {        return true;    } else {        return false;    }}/*****************************************************************************/function resolveCfgFilePath() {    if (IsMacintoshOS()) {        var f = "file://~/Library/Preferences/Macromedia/Flash Player/#Security/FlashPlayerTrust/" + _gCurrentESHui.name + ".cfg";        return f;    } else {        var f = "file://" + Folder.userData + "/Macromedia/Flash Player/#Security/FlashPlayerTrust/" + _gCurrentESHui.name + ".cfg";        return f;    }}function addSecurityEntry() {    var cfgpath = resolveCfgFilePath();    var f = new File(cfgpath);    f.open("a");    var mypath = _gCurrentESHui.path;    var myPath1 = new Folder(mypath + "/extras");    f.writeln("\n" + myPath1.fsName);    f.close();}function checkSecurityEntry(path) {    //Try to add this folder to flash player trusted cfg file    var cfgpath = new File(resolveCfgFilePath());    if (new Folder(cfgpath.path).exists == false) {        new Folder(cfgpath.path).create();    }    var f = new File(cfgpath);    var result = false;    if (f.exists) {        f.open("r");        while (!f.eof) {            var s = f.readln();            if (s != null) {                if (s == path) {                    result = true;                    break;                }            }        }        f.close();    }    return result;}function openPanel(Name) {    var desc1 = new ActionDescriptor();    var ref1 = new ActionReference();    ref1.putName(charIDToTypeID('Mn  '), Name);    desc1.putReference(charIDToTypeID('null'), ref1);    try {        executeAction(charIDToTypeID('slct'), desc1, DialogModes.NO);    } catch (e) {}};function initializeDrawingState(swatchBtn) {    var gfx = swatchBtn.graphics;    var btnW = swatchBtn.preferredSize[0];    var btnH = swatchBtn.preferredSize[1];    //  Define the top-left and bottom-right border paths    var halfBorderW = 0;    gfx.newPath();    gfx.moveTo(halfBorderW, btnH - halfBorderW);    gfx.lineTo(halfBorderW, halfBorderW);    gfx.lineTo(btnW - halfBorderW, halfBorderW);    swatchBtn.tlBorderPath = gfx.currentPath;    gfx.newPath();    gfx.moveTo(halfBorderW, btnH - halfBorderW);    gfx.lineTo(btnW - halfBorderW, btnH - halfBorderW);    gfx.lineTo(btnW - halfBorderW, halfBorderW);    swatchBtn.brBorderPath = gfx.currentPath;    //  Define the border pens: use semi-transparent pens so the background color shows through    swatchBtn.highlightPen = gfx.newPen(gfx.PenType.SOLID_COLOR, [.1, .1, .1, 0], 0);    swatchBtn.shadowPen = gfx.newPen(gfx.PenType.SOLID_COLOR, [.1, .1, .1, 0], 0);}function drawRGBSwatch(drawingStateObj) {    var gfx = this.graphics;    try {        //Don't draw button background - let our container's BG color show through. Just draw the border,        //based on mouse state: first draw 'under' the border with the solid BG color from our container,        //then draw over top of this using the semi-transparent border highlight and shadow.        // gfx.strokePath (this.bgPen, this.tlBorderPath);        gfx.strokePath(this.bgPen, this.brBorderPath);        // if (drawingStateObj.leftButtonPressed) {        //   gfx.strokePath (this.shadowPen, this.tlBorderPath);        //   gfx.strokePath (this.highlightPen, this.brBorderPath);        // }        // else {        //   gfx.strokePath (this.highlightPen, this.tlBorderPath);        //   gfx.strokePath (this.shadowPen, this.brBorderPath);        // }    } catch (e) {        //  On any error, undefine the onDraw handler, so we don't get here again        this.onDraw = undefined;        alert("drawRGBSwatch handler failed.\n" + e);    }}function optWin() {    alert('opt');}function openHTML( address ){        var htmlFIle = new File(Folder.temp + "/BCMESHui_Help.html");        var srHTM = '<html xmlns="http://www.w3.org/1999/xhtml">\n<head></head>\                <body onLoad = "window.location = \''+address+'\'"></body>\n</html>';        htmlFIle.open('w');        htmlFIle.write(srHTM);        htmlFIle.close();        htmlFIle.execute();        win.close();}