#include "_libs/bezier.jsxinc"

function _2addMyButton(parent, bounds, boundsDraw, redraw ){
	// logW('---addddd---BBBB');
	// alert('vb')
	// if(reusePrecalculated== true){// this will reuse the contur it needs to have a global _2btnPathsArr decalred
	// 	if(_2btnPathsArr){
	// 		if(_2btnPathsArr.length == 0){
	// 			preCalcRoundRect1(1, 1, bounds.width-3, bounds.height-3);// only 1 calculation for the buttons
	// 		}
	// 	}
	// }

	if(parseInt(app.version) > 15){
		if(Object.prototype.toString.call( bounds ) === '[object Array]'){
			var g = parent.add('statictext', undefined, '');
			g.preferredSize = [bounds[0], bounds[1]];
			// alert('array');
		}else{
			var g = parent.add('statictext', bounds, '');
		}
	}else{
		g = parent.add('group', undefined, '');
		g.preferredSize = [bounds[0], bounds[1]];
	}
	g.md = false;
	g.visible = true;
	// g.bReuse = reusePrecalculated;
	g.llPath = [];
	g.redraw = redraw;
	g.clicked = 0;
	g.boundsDraw = boundsDraw;
	// g.label = label;
	// g.shortcut = shortcut;
	// g.img = image;
	g.onDraw = _2winDraw;
	g.command = '';
	g.onRightMouse = '';
	g.id = null;
	g.context = false;
	g.helptip = '';

	_2addEvents(g);
	// g.onMove = function(){alert(_2btnPathsArr)};
	return g;


}

function _2addEvents(g){
    g.addEventListener('click', function (kd){_2clicked (kd)});
    g.addEventListener('mousedown', function (kd){_2mdown (kd)});
    g.addEventListener('mouseup', function (kd){_2mup (kd)});
};

function _2resizeWin(){
	g.bounds = {x:0, y:0, width: w.bounds.width-30, height:w.bounds.height-log.bounds.height-45};
	// log.bounds = {x:0, y:w.bounds.height-405, width:400, height:20};
}
function _2mout(e){
	// log.text += '\nmouse out';
	// for(a in e){
	// 	log.text += ("\n"+a+" :: "+e[a]);
	// }
}
function _2mover(e){
	// try{
	// 	log.text = '\nmover';
	// 	for(a in e){
	// 		log.text += ("\n"+a+" :: "+e[a]);
	// 	}
	// }catch(err){}

}
function _2clicked(e){
	logW('btnStick :::  clicked')
	_2winDrawClick(e.target);

	// try{
	// 	log.text = '\nclicked';
	// 	for(a in e){
	// 		log.text += ("\n"+a+" :: "+e[a]);
	// 	}
	// }catch(err){}

}

function _2mdown(e){
	// try{
	// 	log.text = '\nmouse down';
	// 	for(a in e){
	// 		log.text += ("\n"+a+" :: "+e[a]);
	// 	}
	// }catch(err){}
	e.target.md = true;
}

function _2mup(e){
	// log.text = '\nmouse up';
	// log.text += '\n'+e.target.md;
	// log.text += '\n'+e.target.md;

	if(e.target.md == true){
		if(e.button == 2){
			fn = e.target.onRightMouse;
			if (typeof fn === "function"){
				var oRM =(''+fn);
				oRM = oRM.replace(/this/g, 'e.target');
				var foo = new Function("return ("+oRM+")")();
				foo();
			}
		}
	}
	e.target.md = false;

}
function _2mmove(e){
	if(e.target.md == true){
		// log.text += '\nmouse move';
		// log.text += '\n\t'+e.clientX;

		// for(a in e){
		// 	log.text += ("\n\t"+a+" :: "+e[a]);
		// }
		
	}
}


function _2winDrawClick(drawingStateObj){
	drawingStateObj.clicked = 1;
	drawingStateObj.notify("onDraw");
	$.sleep(150);
	drawingStateObj.clicked = 0;
	drawingStateObj.notify("onDraw");

}
function _2szDraw(drawingStateObj){
	var gfx = this.graphics;
	W = this.bounds.width;
	H = this.bounds.height;

	gfx.newPath();
	gfx.moveTo(20, 2);
	gfx.lineTo(0,20);
	gfx.lineTo(20,40);

	var pen = gfx.newPen (gfx.PenType.SOLID_COLOR, [.8, .8, .8, 1], 2);
		gfx.strokePath (pen, gfx.currentPath);

}

function _2winDraw(drawingStateObj){
	logW('buttonStick :: draW');
	if(this.redraw == 1){	
		// alert('rdraw');
		var gfx = this.graphics;
		W = this.boundsDraw.width;
		H = this.boundsDraw.height;
		X = this.boundsDraw.x;
		Y = this.boundsDraw.y;
		
		if(this.llPath.length == 0){
			// if(this.bReuse == true){
			// 	if(_2btnPathsArr.length != 0){
			// 		gfx.newPath();
			// 		gfx.moveTo(_2btnPathsArr[0][0], _2btnPathsArr[0][1]);
			// 		for(var i=1;i<_2btnPathsArr.length;i++){
			// 			gfx.lineTo(_2btnPathsArr[i][0],_2btnPathsArr[i][1]);
			// 		}
			// 		this.llPath = _2btnPathsArr;
			// 	}
			// }else{
				_2btnPathsArr = [];
				_2preCalcRoundRect1(X, Y, W-3, H-3);
				gfx.newPath();
				gfx.moveTo(_2btnPathsArr[0][0], _2btnPathsArr[0][1]);
				for(var i=1;i<_2btnPathsArr.length;i++){
					gfx.lineTo(_2btnPathsArr[i][0],_2btnPathsArr[i][1]);
				}			
				this.llPath = _2btnPathsArr;
		
			// }
		}else{// reusing the first line created
			gfx.newPath();
			gfx.moveTo(this.llPath[0][0], this.llPath[0][1]);
			for(var i=1;i<this.llPath.length;i++){
				gfx.lineTo(this.llPath[i][0],this.llPath[i][1]);
			}
		}


			var pen = gfx.newPen (gfx.PenType.SOLID_COLOR, [.8, .8, .8, .5], 1);
			if(this.context == true){
				pen = gfx.newPen (gfx.PenType.SOLID_COLOR, [.8, .8, .8, 1], 1);
			}
				gfx.strokePath (pen, gfx.currentPath);
				
			if(this.clicked == 0){
				var brush = gfx.newBrush(gfx.BrushType.SOLID_COLOR, [.2, .2, .2, .1]);
			}else{
				var brush = gfx.newBrush(gfx.BrushType.SOLID_COLOR, [.9, .9, .9, 1]);
			}
			if(this.context == true){
				var brush = gfx.newBrush(gfx.BrushType.SOLID_COLOR, [.2, .2, .2, .5]);
			}
		// }
		this.conturPen = pen;
		this.fillBrush = brush;
		this.cPath = gfx.currentPath;
		gfx.fillPath(brush, gfx.currentPath);


		// if(this.img != ""){
		// 	if(new File(this.img).exists){
		// 		var img = ScriptUI.newImage(this.img);
		// 			gfx.drawImage( img, 0, 0, W, H);
		// 	}
		// }

		// the label:::::::

		// var font = ScriptUI.newFont("Tahoma",12.0);
		// if(this.clicked == 0){
		// 	var penF = gfx.newPen (gfx.PenType.SOLID_COLOR, [1, 1, 1, 1], 1);
		// }else{
		// 	var penF = gfx.newPen (gfx.PenType.SOLID_COLOR, [.1, .1, .1, .1], 1);
		// }
		// var strArr = this.label.split("\n");

		// for(var i=0; i<strArr.length; i++){
		// 	var cStr = strArr[i];
		// 	var cStrDim = gfx.measureString(cStr, font);
		// 	// log.text += ("\n"+cStr+" :: ["+cStrDim[0]+", "+cStrDim[1]+"]");
		// 	// var spaceBetween = cStrDim[1]/30;
		// 	var spaceBetween = 0;
		// 	var	strH = (cStrDim[1] * strArr.length) + (spaceBetween*(strArr.length-1));
		// 	var strPosY = (((H/2)-(strH/2))+((cStrDim[1]+spaceBetween)*i));//on the center
		// 	// var strPosY = (H/2)+(((H/4)-(strH/2))+((cStrDim[1]+spaceBetween)*i));//ofsetted
		// 	var strPosX = ((W/2)-(cStrDim[0]/2));			
		// 	gfx.drawString(cStr, penF, strPosX, strPosY, font);
		// }

		// the shortcut::::::::::::::

		// var fontSH = ScriptUI.newFont("Tahoma Bold",10.0);
		// // for(a in fontSH){
		// 	// log.text +=("\n"+a+" :: "+fontSH[a]);
		// // }
		// var SHDim = gfx.measureString(this.shortcut, fontSH);
		// // log.text += ("\n"+this.shortcut+" :: ["+SHDim[0]+", "+SHDim[1]+"]");
		// SHDim = [	SHDim[0]*(fontSH.size/12.0),
		// 			SHDim[1]*(fontSH.size/12.0)]
		// var SHstrPosY = (H/10)-(SHDim[1]/2);

		// // log.text += ("\n"+this.shortcut+" :: ["+SHDim[0]+", "+SHDim[1]+"]");
		// var SHstrPosX = (W-SHDim[0])-10;
		// // log.text += ("\n"+SHstrPosX);

		// var penA = gfx.newPen (gfx.PenType.SOLID_COLOR, [1, 1, 1, 1], 1);
		// gfx.drawString(this.shortcut, penA, SHstrPosX, SHstrPosY, fontSH);

	}
}

function _2precalcBezier(a, b, c, d){
	var step = 10;
	var bz = new Bezier(a,b,c,d);
	// gfx.moveTo(bz.a.x, bz.a.y);
	for( var i=0; i<1; ){
		_2btnPathsArr.push([bz.mx(i), bz.my(i)]);
		i=i+(1/step);
	}
}

function _2preCalcRoundRect1(x, y, w, h){// using bezier
	// logW('calc--------;');
	var whRation = w/h;

	// obj.text += "\n"+obj;
	var ww = 3;
	var dd = 3;
	var baseMin = .5;
	var baseMax = 1;
	var baseMax2 = 2;
	var limitMin = 3;
	var limitMax = 2;
	var cw = w/ww;
	if(whRation <= baseMin){
		dd = limitMin;
	}else if(whRation >= baseMax){
		dd = limitMax; 
		if(whRation >= baseMax2){
			cw = (h*baseMax2)/ww;
		}
	}else{
		dd = ((limitMax - limitMin) * (whRation - baseMin) / (baseMax - baseMin)) + limitMin;
	}


	// var cw = w/ww;
	var ch = h/dd;
	var crw = .4;
	var crh = .7;

	_2btnPathsArr.push([x+cw, y]);
	
	_2precalcBezier(	{x:(x+w)-cw, 			y:y},
					{x:((x+w)-cw)+(cw*crw),	y:y},// ctrl1
					{x:x+w,					y:(y+ch)-(ch*crh)},// ctrl2 
					{x:x+w,      			y:y+ch});
	_2precalcBezier(	{x:x+w, 				y:(y+h)-ch},
					{x:x+w,					y:((y+h)-ch)+(ch*crh)},// ctrl1
					{x:((x+w)-cw)+(cw*crw),	y:y+h},// ctrl2 
					{x:(x+w)-cw,      		y:y+h});
	_2precalcBezier(	{x:x+cw, 				y:y+h},
					{x:(x+cw)-(cw*crw),		y:y+h},// ctrl1
					{x:x,					y:((y+h)-ch)+(ch*crh)},// ctrl2 
					{x:x,      				y:(y+h)-ch});
	_2precalcBezier(	{x:x, 					y:y+ch},
					{x:x,					y:(y+ch)-(ch*crh)},// ctrl1
					{x:(x+cw)-(cw*crw),		y:y},// ctrl2 
					{x:x+cw,      			y:y});	

}



function _2infos(g){
	// var gfx = g.graphics;
	
	// for(a in gfx){
	// 	log.text += ('\n'+a+" :: "+gfx[a]);
	// }
	// var step = 10;

	// var bz = new Bezier({x:100, y:100},
	// 					{x:150, y:30},
	// 					{x:200, y:150},
	// 					{x:250, y:100});
	// for( var i=0;  i<=1;){
	// 	alert(bz.mx(i)+", "+ bz.my(i));
	// 	i = i+0.1;
	// }
}
// function _2drawBezier(gfx, a, b, c, d, obj){
// 	var step = 6;
// 	var bz = new Bezier(a,b,c,d);
// 	// gfx.moveTo(bz.a.x, bz.a.y);
// 	for( var i=0; i<1; ){
// 		gfx.lineTo(bz.mx(i), bz.my(i));
// 		_2btnPathsArr.push(gfx.currentPoint);
// 		obj.llPath.push(gfx.currentPoint);
// 		i=i+(1/step);
// 	}
// }

// function _2drawRoundRect1(gfx, x, y, w, h, obj){// using bezier
// 	var whRation = w/h;

// 	// obj.text += "\n"+obj;
// 	var ww = 3;
// 	var dd = 3;
// 	var baseMin = .5;
// 	var baseMax = 1;
// 	var baseMax2 = 2;
// 	var limitMin = 3;
// 	var limitMax = 2;
// 	var cw = w/ww;
// 	if(whRation <= baseMin){
// 		dd = limitMin;
// 	}else if(whRation >= baseMax){
// 		dd = limitMax; 
// 		if(whRation >= baseMax2){
// 			cw = (h*baseMax2)/ww;
// 		}
// 	}else{
// 		dd = ((limitMax - limitMin) * (whRation - baseMin) / (baseMax - baseMin)) + limitMin;
// 	}


// 	// var cw = w/ww;
// 	var ch = h/dd;
// 	var crw = .4;
// 	var crh = .7;
// 	gfx.moveTo (x+cw, y);
// 		obj.llPath.push(gfx.currentPoint);
// 	gfx.lineTo ((x+w)-cw, y);
// 	drawBezier(gfx, {x:(x+w)-cw, 			y:y},
// 					{x:((x+w)-cw)+(cw*crw),	y:y},// ctrl1
// 					{x:x+w,					y:(y+ch)-(ch*crh)},// ctrl2 
// 					{x:x+w,      			y:y+ch}, obj);
// 	gfx.lineTo (x+w, (y+h)-ch);
// 	drawBezier(gfx, {x:x+w, 				y:(y+h)-ch},
// 					{x:x+w,					y:((y+h)-ch)+(ch*crh)},// ctrl1
// 					{x:((x+w)-cw)+(cw*crw),	y:y+h},// ctrl2 
// 					{x:(x+w)-cw,      		y:y+h}, obj);
// 	gfx.lineTo (x+cw, y+h);
// 	drawBezier(gfx, {x:x+cw, 				y:y+h},
// 					{x:(x+cw)-(cw*crw),		y:y+h},// ctrl1
// 					{x:x,					y:((y+h)-ch)+(ch*crh)},// ctrl2 
// 					{x:x,      				y:(y+h)-ch}, obj);
// 	gfx.lineTo (x, y+ch);
// 	drawBezier(gfx, {x:x, 					y:y+ch},
// 					{x:x,					y:(y+ch)-(ch*crh)},// ctrl1
// 					{x:(x+cw)-(cw*crw),		y:y},// ctrl2 
// 					{x:x+cw,      			y:y}, obj);	

// }

